// Code generated by 'go generate'; DO NOT EDIT.

package sys

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
	moduser32   = windows.NewLazySystemDLL("user32.dll")

	procGetDriveTypeW           = modkernel32.NewProc("GetDriveTypeW")
	procGetLogicalDriveStringsW = modkernel32.NewProc("GetLogicalDriveStringsW")
	procGetPriorityClass        = modkernel32.NewProc("GetPriorityClass")
	procSetPriorityClass        = modkernel32.NewProc("SetPriorityClass")
	procFindWindowA             = moduser32.NewProc("FindWindowA")
)

func GetDriveType(RootPathName string) (driveType uint32, err error) {
	var _p0 *uint16
	_p0, err = syscall.UTF16PtrFromString(RootPathName)
	if err != nil {
		return
	}
	return _GetDriveType(_p0)
}

func _GetDriveType(RootPathName *uint16) (driveType uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetDriveTypeW.Addr(), 1, uintptr(unsafe.Pointer(RootPathName)), 0, 0)
	driveType = uint32(r0)
	if driveType == 0 {
		err = errnoErr(e1)
	}
	return
}

func getLogicalDriveStrings(bufferLength uint32, lpBuffer *uint16) (requiredLength uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetLogicalDriveStringsW.Addr(), 2, uintptr(bufferLength), uintptr(unsafe.Pointer(lpBuffer)), 0)
	requiredLength = uint32(r0)
	if requiredLength == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetPriorityClass(process syscall.Handle) (priorityClass uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetPriorityClass.Addr(), 1, uintptr(process), 0, 0)
	priorityClass = uint32(r0)
	if priorityClass == 0 {
		err = errnoErr(e1)
	}
	return
}

func SetPriorityClass(process syscall.Handle, priorityClass uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procSetPriorityClass.Addr(), 2, uintptr(process), uintptr(priorityClass), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func FindWindow(className *uint8, windowName *uint8) (handle syscall.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procFindWindowA.Addr(), 2, uintptr(unsafe.Pointer(className)), uintptr(unsafe.Pointer(windowName)), 0)
	handle = syscall.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}
